# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  clientProjectPath: 'source/OpenRedding.Client/OpenRedding.Client.csproj'
  clientProjectDist: '$(Build.SourcesDirectory)/source/OpenRedding.Client/dist'

steps:
# Use the SDK version in global.json  
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    useGlobalJson: true

# Run all unit and integration tests
#- task: DotNetCoreCLI@2
#  inputs:
#    command: 'test'
#    projects: 'tests/**/*.csproj'
#    testRunTitle: 'Run tests'

# Build the client project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(clientProjectPath)'
    arguments: '-c $(buildConfiguration)'

# Build the distribution files for the client
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(clientProjectPath)'
    arguments: '--no-restore --output dist'
    zipAfterPublish: false
    modifyOutputPath: true

# Build and deploy the docker image
#- task: Docker@2
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#  inputs:
#    containerRegistry: 'DockerHub'
#    repository: 'joey32793/openreddingapi'
#    command: 'buildAndPush'
#    Dockerfile: 'source/OpenRedding.Api/Dockerfile.production'
#    buildContext: '$(Build.SourcesDirectory)'
#    tags: 'latest'

# Install netlify-cli
- script: npm install netlify-cli 
  displayName: 'Install netlify-cli'

# Deploy the wwwroot from the output directory
# The argument "--prod" deploys to production
- script: npx netlify deploy --prod --dir $(clientProjectDist)/wwwroot --site $(netlifySiteId) --auth $(netlifyApiKey)
  displayName: 'Deploy site to Netlify'
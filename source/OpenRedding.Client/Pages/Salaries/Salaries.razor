@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@page "/salaries"

@using Fluxor
@using OpenRedding.Client.Services
@using OpenRedding.Client.Store.State
@using OpenRedding.Client.Components.Salaries
@using OpenRedding.Domain.Common.Miscellaneous

@inject NavigationManager Navigation
@inject IState<SalariesState> State
@inject SalariesStateFacade StateFacade

<section id="open-redding-salaries" class="container mt-4">
    <h2 class="text-center font-weight-bolder mb-1">Salaries</h2>

    @* Workaround for now, using local isLoading flag to reduce page load transition times  *@
    @if (State.Value.IsLoading || isLoading)
    {
        <div class="d-flex flex-row justify-content-center mt-5">
            <div class="spinner-border text-info" role="status">
                <span class="sr-only">Loading salary data...</span>
            </div>
        </div>
    }
    else if (State.Value.SalaryResults is null || State.Value.SalaryResults.Results is null)
    {
        <div class="d-flex flex-column justify-content-center">
            <div class="alert alert-light text-center">
                <h4 class="alert-heading">Uh oh...</h4>
                <p class="mb-0">Looks like there was an issue retrieving the data, click the button below to try again.</p>
                <button @onclick="(() => StateFacade.LoadAllEmployees())" class="mt-3 btn btn-outline-info">Refresh</button>
            </div>
        </div>
    }
    else
    {
        <div class="mx-4">
            <RefinedSalarySearch PageCount="State.Value.SalaryResults.Pages" ResultCount="State.Value.SalaryResults.Count" CurrentPage="State.Value.SalaryResults.CurrentPage" />
            <p class="text-center">To view detailed information about a particular record, select from a row in the table below.</p>
        </div>

        @* Pagination *@
        @if (State.Value.SalaryResults.Links != null)
        {
            <div class="row justify-content-center">
                @* First and previous links *@
                <ul class="pagination">
                    @* First page*@
                    @if (IsValidLink(State.Value.SalaryResults.Links.First) && State.Value.SalaryResults.CurrentPage != 1)
                    {
                        <li class="page-item">
                            <a class="page-link text-white cursor-pointer" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.First!.Href!))">
                                <span class="d-flex flex-row">
                                    <i class="fas fa-angle-double-left mt-1 px-2"></i>
                                    first
                                </span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link text-white cursor-not-allowed">
                                <span class="d-flex flex-row">
                                    <i class="fas fa-angle-double-left mt-1 px-2"></i>
                                    first
                                </span>
                            </a>
                        </li>
                    }

                    @* Previous page *@
                    @if (IsValidLink(State.Value.SalaryResults.Links.Previous))
                    {
                        <li class="page-item">
                            <a class="page-link text-white cursor-pointer" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.Previous!.Href!))">
                                <span class="d-flex flex-row">
                                    <i class="fas fa-angle-left mt-1 px-2"></i>
                                    previous
                                </span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link text-white cursor-not-allowed">
                                <span class="d-flex flex-row">
                                    <i class="fas fa-angle-left mt-1 px-2"></i>
                                    previous
                                </span>
                            </a>
                        </li>
                    }
                </ul>

                @* Page select dropdown *@
                <div class="d-none d-sm-block">
                    <div class="d-flex flex-row justify-content-center px-2">
                        @if (State.Value.IsTableRefresh)
                        {
                            <select class="custom-select cursor-not-allowed" disabled>
                                <option selected>@State.Value.SalaryResults.CurrentPage</option>
                            </select>
                        }
                        else
                        {
                            <select @onchange="OnPageDropdownSelect" class="custom-select cursor-pointer">
                                @for (var pageNumber = 1; pageNumber <= State.Value.SalaryResults.Pages; pageNumber++)
                                {
                                    @if (pageNumber == State.Value.SalaryResults.CurrentPage)
                                    {
                                        <option selected value="@pageNumber">@pageNumber</option>
                                    }
                                    else
                                    {
                                        <option value="@pageNumber">@pageNumber</option>
                                    }
                                }
                            </select>
                        }
                    </div>
                </div>

                @* Next and last links *@
                <ul class="pagination">
                    @* Next page*@
                    @if (IsValidLink(State.Value.SalaryResults.Links.Next))
                    {
                        <li class="page-item">
                            <a class="page-link text-white cursor-pointer" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.Next!.Href!))">
                                <span class="d-flex flex-row">
                                    next
                                    <i class="fas fa-angle-right mt-1 px-2"></i>
                                </span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link text-white cursor-not-allowed">
                                <span class="d-flex flex-row">
                                    next
                                    <i class="fas fa-angle-right mt-1 px-2"></i>
                                </span>
                            </a>
                        </li>
                    }

                    @* Last page *@
                    @if (IsValidLink(State.Value.SalaryResults.Links.Last) && State.Value.SalaryResults.CurrentPage != State.Value.SalaryResults.Pages)
                    {
                        <li class="page-item">
                            <a class="page-link text-white cursor-pointer" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.Last!.Href!))">
                                <span class="d-flex flex-row">
                                    last
                                    <i class="fas fa-angle-double-right mt-1 px-2"></i>
                                </span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link text-white cursor-not-allowed">
                                <span class="d-flex flex-row">
                                    last
                                    <i class="fas fa-angle-double-right mt-1 px-2"></i>
                                </span>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }

        @if (State.Value.IsTableRefresh)
        {
            <div class="d-flex flex-row justify-content-center mt-5">
                <div class="spinner-border text-info" role="status">
                    <span class="sr-only">Loading salary data...</span>
                </div>
            </div>
        }
        else
        {
            @* Salary table data *@
            <table class="table table-hover mt-2">
                <thead>
                    <tr class="text-center">
                        <th scope="col">Name</th>
                        <th scope="col">Job Title</th>
                        <th scope="col" class="d-none d-md-table-cell">Agency</th>
                        <th scope="col" class="d-none d-md-table-cell">Status</th>
                        <th scope="col" class="d-none d-md-table-cell">Year</th>
                        <th scope="col" class="d-none d-md-table-cell">Base Pay</th>
                        <th scope="col">Total Pay with Benefits</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employeeSalary in State.Value.SalaryResults.Results)
                    {
                        <tr class="text-center cursor-pointer" @onclick="(() => OnRowClicked(employeeSalary.EmployeeDetailLink, employeeSalary.Id))">
                            <td>@employeeSalary.Name</td>
                            <td>@employeeSalary.JobTitle</td>
                            <td class="d-none d-md-table-cell">@employeeSalary.Agency</td>
                            <td class="d-none d-md-table-cell">@employeeSalary.Status</td>
                            <td class="d-none d-md-table-cell">@employeeSalary.Year</td>
                            <td class="d-none d-md-table-cell">@employeeSalary.BasePay.ToString("C")</td>
                            <td>@employeeSalary.TotalPayWithBenefits.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</section>

@code {

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (State.Value.SalaryResults is null && !State.Value.IsLoading)
        {
            Console.WriteLine("LOADING EMPLOYEES");
            StateFacade.LoadAllEmployees();
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            base.Dispose(disposing);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = false;
            await Task.Run(() => StateHasChanged());
        }
    }

    private void OnNavigateToPageResult(string link)
    {
        StateFacade.LoadEmployeesFromLink(link);
    }

    private void OnPageDropdownSelect(ChangeEventArgs e)
    {
        if (State.Value.SalaryResults?.Links is null)
        {
            Console.WriteLine("No links returned to navigate to page");
            return;
        }

        if (State.Value.SalaryResults.Links.Paged is null || string.IsNullOrWhiteSpace(State.Value.SalaryResults.Links.Paged!.Href))
        {
            Console.WriteLine("Paged link not available to follow");
            return;
        }

        var decodedUrl = System.Web.HttpUtility.UrlDecode(State.Value.SalaryResults.Links.Paged!.Href, System.Text.Encoding.UTF8);
        var linkToFollow = decodedUrl.Replace(OpenReddingConstants.PageNumberStringReplacementValue, e.Value.ToString());
        StateFacade.LoadEmployeesFromLink(linkToFollow);
    }

    private bool IsValidLink(OpenReddingLink? link)
    {
        return link != null && !string.IsNullOrWhiteSpace(link.Href) && !State.Value.IsTableRefresh;
    }

    private void OnRowClicked(OpenReddingLink? link, int id)
    {
        if (link is null || string.IsNullOrWhiteSpace(link.Href))
        {
            return;
        }

        StateFacade.LoadEmployeeDetailFromLink(link.Href, id);
    }

}

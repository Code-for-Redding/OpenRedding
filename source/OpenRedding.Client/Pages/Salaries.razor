@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@page "/salaries"

@using Fluxor
@using OpenRedding.Client.Store.Features.Salaries
@using OpenRedding.Client.Store.Features.Salaries.Actions.LoadEmployeeSalaries
@using OpenRedding.Client.Store.Features.Salaries.Actions.LoadEmployeeSalariesFromLink
@using OpenRedding.Domain.Common.Miscellaneous 

@inject NavigationManager Navigation
@inject IState<SalariesState> State
@inject IDispatcher Dispatcher

<section id="open-redding-salaries" class="container mt-4">
    <h2 class="text-center font-weight-bolder mb-1">Salaries</h2>

    @if (State.Value.IsLoading)
    {
        <div class="d-flex flex-row justify-content-center mt-5">
            <div class="spinner-border text-info" role="status">
                <span class="sr-only">Loading salary data...</span>
            </div>
        </div>
    }
    else if (State.Value.SalaryResults is null || State.Value.SalaryResults.Results is null)
    {
        <div class="d-flex flex-column justify-content-center">
            <div class="alert alert-light text-center">
                <h4 class="alert-heading">Uh oh...</h4>
                <p class="mb-0">Looks like there was an issue retrieving the data, click the button below to try again.</p>
                <button @onclick="(() => Dispatcher.Dispatch(new LoadEmployeeSalariesAction(null)))" class="mt-3 btn btn-outline-info">Refresh</button>
            </div>
        </div>
    }
    else
    {
        <RefinedSalarySearch PageCount="State.Value.SalaryResults.Pages" ResultCount="State.Value.SalaryResults.Count" CurrentPage="State.Value.SalaryResults.CurrentPage" />

        @if (State.Value.IsTableRefresh)
        {
            <div class="d-flex flex-row justify-content-center mt-5">
                <div class="spinner-border text-info" role="status">
                    <span class="sr-only">Loading salary data...</span>
                </div>
            </div>
        }
        else
        {
            <p class="text-center">To view detailed information about a particular record, select from a row in the table below.</p>

            @* Pagination *@
            @if (State.Value.SalaryResults.Links != null)
            {
                <div class="row justify-content-center">
                    @* First and previous links *@
                    <ul class="pagination">
                        @* First page*@
                        @if (State.Value.SalaryResults.Links.Last != null && !string.IsNullOrWhiteSpace(State.Value.SalaryResults.Links.First!.Href) && State.Value.SalaryResults.CurrentPage != 1)
                        {
                            <li class="page-item">
                                <a style="cursor: pointer;" class="page-link text-white" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.First!.Href!))">
                                    <span class="d-flex flex-row">
                                        <i class="fas fa-angle-double-left mt-1 px-2"></i>
                                        first
                                    </span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a style="cursor: not-allowed;" class="page-link text-white">
                                    <span class="d-flex flex-row">
                                        <i class="fas fa-angle-double-left mt-1 px-2"></i>
                                        first
                                    </span>
                                </a>
                            </li>
                        }

                        @* Previous page *@
                        @if (State.Value.SalaryResults.Links.Previous != null && !string.IsNullOrWhiteSpace(State.Value.SalaryResults.Links.Previous!.Href))
                        {
                            <li class="page-item">
                                <a style="cursor: pointer;" class="page-link text-white" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.Previous!.Href!))">
                                    <span class="d-flex flex-row">
                                        <i class="fas fa-angle-left mt-1 px-2"></i>
                                        previous
                                    </span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a style="cursor: not-allowed;" class="page-link text-white">
                                    <span class="d-flex flex-row">
                                        <i class="fas fa-angle-left mt-1 px-2"></i>
                                        previous
                                    </span>
                                </a>
                            </li>
                        }
                    </ul>

                    @* Page select dropdown *@
                    <div class="d-flex flex-row justify-content-center px-2">
                        <select style="cursor: pointer;" @onchange="OnPageDropdownSelect" class="custom-select">
                            @for (var pageNumber = 1; pageNumber <= State.Value.SalaryResults.Pages; pageNumber++)
                            {
                                @if (pageNumber == State.Value.SalaryResults.CurrentPage)
                                {
                                    <option selected value="@pageNumber">@pageNumber</option>
                                }
                                else
                                {
                                    <option value="@pageNumber">@pageNumber</option>
                                }
                            }
                        </select>
                    </div>

                    @* Next and last links *@
                    <ul class="pagination">
                        @* Next page*@
                        @if (State.Value.SalaryResults.Links.Last != null && !string.IsNullOrWhiteSpace(State.Value.SalaryResults.Links.Next!.Href))
                        {
                            <li class="page-item">
                                <a style="cursor: pointer;" class="page-link text-white" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.Next!.Href!))">
                                    <span class="d-flex flex-row">
                                        next
                                        <i class="fas fa-angle-right mt-1 px-2"></i>
                                    </span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a style="cursor: not-allowed;" class="page-link text-white">
                                    <span class="d-flex flex-row">
                                        next
                                        <i class="fas fa-angle-right mt-1 px-2"></i>
                                    </span>
                                </a>
                            </li>
                        }

                        @* Last page *@
                        @if (State.Value.SalaryResults.Links.Previous != null && !string.IsNullOrWhiteSpace(State.Value.SalaryResults.Links.Last!.Href) && State.Value.SalaryResults.CurrentPage != State.Value.SalaryResults.Pages)
                        {
                            <li class="page-item">
                                <a style="cursor: pointer;" class="page-link text-white" @onclick="(() => OnNavigateToPageResult(State.Value.SalaryResults.Links.Last!.Href!))">
                                    <span class="d-flex flex-row">
                                        last
                                        <i class="fas fa-angle-double-right mt-1 px-2"></i>
                                    </span>
                                </a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <a style="cursor: not-allowed;" class="page-link text-white">
                                    <span class="d-flex flex-row">
                                        last
                                        <i class="fas fa-angle-double-right mt-1 px-2"></i>
                                    </span>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            }

            @* Salary table data *@
            <table class="table table-hover mt-2">
                <thead>
                    <tr class="text-center">
                        <th scope="col">Name</th>
                        <th scope="col">Job Title</th>
                        <th scope="col">Agency</th>
                        <th scope="col">Status</th>
                        <th scope="col">Year</th>
                        <th scope="col">Base Pay</th>
                        <th scope="col">Total Pay with Benefits</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employeeSalary in State.Value.SalaryResults.Results)
                    {
                        <tr class="text-center">
                            <td>@employeeSalary.Name</td>
                            <td>@employeeSalary.JobTitle</td>
                            <td>@employeeSalary.Agency</td>
                            <td>@employeeSalary.Status</td>
                            <td>@employeeSalary.Year</td>
                            <td>@employeeSalary.BasePay.ToString("C")</td>
                            <td>@employeeSalary.TotalPayWithBenefits.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }

</section>

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OnNavigateToPageResult(string link)
    {
        Dispatcher.Dispatch(new LoadEmployeeSalariesFromLinkAction(link));
    }

    private void OnPageDropdownSelect(ChangeEventArgs e)
    {
        if (State.Value.SalaryResults?.Links is null)
        {
            Console.WriteLine("No links returned to navigate to page");
            return;
        }

        if (State.Value.SalaryResults.Links.Paged is null || string.IsNullOrWhiteSpace(State.Value.SalaryResults.Links.Paged!.Href))
        {
            Console.WriteLine("Paged link not available to follow");
            return;
        }

        var decodedUrl = System.Web.HttpUtility.UrlDecode(State.Value.SalaryResults.Links.Paged!.Href, System.Text.Encoding.UTF8);
        Console.WriteLine($"Decoded URL: {decodedUrl}");

        var linkToFollow = decodedUrl.Replace(OpenReddingConstants.PageNumberStringReplacementValue, e.Value.ToString());
        Console.WriteLine($"Link to follow is: {linkToFollow}");

        Dispatcher.Dispatch(new LoadEmployeeSalariesFromLinkAction(linkToFollow));
    }

}

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using OpenRedding.Client.Store.Features.Salaries.Actions.LoadEmployeeSalaries 
@using OpenRedding.Client.Components
@using OpenRedding.Domain.Common.ViewModels 
@using OpenRedding.Domain.Salaries.Dtos 
@using OpenRedding.Domain.Salaries.Enums

@inject IDispatcher Dispatcher
@inject NavigationManager Navigation

@* Salary search *@
<div class="form-group row px-2">

    @* Name *@
    <div class="col-md-3">
        <ValidatedInput
                OnValidatedInput="IsValidEmployeeNameHandler"
                OnValueInput="EmployeeNameInputHandler"
                DisplayErrorMessage="false"
                FieldLabel="Name" 
                InputId="salary-search-name" 
                LabelCss="col-form-label text-white" />
    </div>

    @* Job title *@
    <div class="col-md-3">
        <ValidatedInput 
                OnValidatedInput="IsValidJobTitleHandler"
                OnValueInput="JobTitleInputHandler"
                DisplayErrorMessage="false"
                FieldLabel="Job Title"
                InputId="salary-search-job-title" 
                LabelCss="col-form-label text-white" />
    </div>

    @* Agency *@
    <div class="col-md-3">
        <div class="d-flex flex-column">
            <label class="col-form-label text-white-90" for="agency-dropdown">Agency</label>
            <select @bind="employeeAgency" id="agency-dropdown" class="form-control">
                <option disabled>Select an agency</option>
                @foreach (var agencyOption in employeeAgencySelectOptions.SelectOptions)
                {
                    <option value="@agencyOption.Key">@agencyOption.Value</option>
                }
            </select>
        </div>
    </div>

    @* Status *@
    <div class="col-md-3">
        <div class="d-flex flex-column">
            <label class="col-form-label text-white-90" for="agency-dropdown">Status</label>
            <select @bind="employeeStatus" id="status-dropdown" class="form-control">
                <option disabled>Select a status</option>
                @foreach (var statusOption in employeeStatusSelectOptions.SelectOptions)
                {
                    <option value="@statusOption.Key">@statusOption.Value</option>
                }
            </select>
        </div>
    </div>

    @* Search button *@
    @if (isValidEmployeeName && isValidJobTitle)
    {
        <div class="pt-4 d-flex flex-row mx-auto">
            <button @onclick="OnSearchClicked" class="btn btn-lg btn-info" type="button" data-toggle="tooltip" data-placement="bottom" title="To browse all salary data, leave all fields above blank.">Search</button>
        </div>
    }
    else
    {
        <div class="pt-4 d-flex flex-row mx-auto">
            <button style="cursor: not-allowed" disabled @onclick="OnSearchClicked" class="btn btn-lg btn-info" type="button" data-toggle="tooltip" data-placement="bottom" title="Please enter valid values in the fields above before attempting to search.">Search</button>
        </div>
    }
</div>

@code {

    private string? employeeName;

    private string? jobTitle;

    private bool isValidEmployeeName = true;

    private bool isValidJobTitle = true;

    private EmployeeAgency employeeAgency = EmployeeAgency.AllAgencies;

    private EmployeeStatus employeeStatus = EmployeeStatus.AllStatuses;

    private OpenReddingEnumSelectViewModel<EmployeeAgency> employeeAgencySelectOptions = new OpenReddingEnumSelectViewModel<EmployeeAgency>();

    private OpenReddingEnumSelectViewModel<EmployeeStatus> employeeStatusSelectOptions = new OpenReddingEnumSelectViewModel<EmployeeStatus>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        employeeAgencySelectOptions
            .AddOption(EmployeeAgency.AllAgencies, "All Agencies")
            .AddOption(EmployeeAgency.Redding, "Redding")
            .AddOption(EmployeeAgency.ShastaCounty, "Shasta County")
            .AddOption(EmployeeAgency.Other, "Other");

        employeeStatusSelectOptions
            .AddOption(EmployeeStatus.AllStatuses, "All Statuses")
            .AddOption(EmployeeStatus.FullTime, "Full-time")
            .AddOption(EmployeeStatus.PartTime, "Part-time")
            .AddOption(EmployeeStatus.Other, "Other");
    }

    private void OnSearchClicked()
    {
        var searchRequest = new EmployeeSalarySearchRequestDto(employeeName, jobTitle, employeeAgency.ToString(), employeeStatus.ToString(), null, null, null);

        Dispatcher.Dispatch(new LoadEmployeeSalariesAction(searchRequest));
        Navigation.NavigateTo("salaries");
    }

    private void IsValidEmployeeNameHandler(bool isValid)
    {
        isValidEmployeeName = isValid;
    }

    private void IsValidJobTitleHandler(bool isValid)
    {
        isValidJobTitle = isValid;
    }

    private void EmployeeNameInputHandler(string? updatedEmployeeValue)
    {
        employeeName = updatedEmployeeValue;
    }

    private void JobTitleInputHandler(string? updatedJobtTileHandler)
    {
        jobTitle = updatedJobtTileHandler;
    }

}
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using OpenRedding.Client.Components.Common
@using OpenRedding.Client.Components.Dropdowns.Salaries
@using OpenRedding.Client.Store.Features.Salaries
@using OpenRedding.Domain.Common.ViewModels
@using OpenRedding.Domain.Salaries.Enums


@inject IState<SalariesState> State
@inject IDispatcher Dispatcher

@* Search metadata *@
<div class="card bg-light mt-4">

    @* Card container *@
    <div class="card-body">
        @* Psuedo header *@
        <div class="text-center">
            <h4 class="card-title text-center">Search Criteria</h4>
            <h6 class="card-subtitle mb-2 text-muted">Enter values below, then hit the search button to refine your results</h6>
        </div>

        @* Refined search fields *@
        <div class="d-flex flex-column align-content-center">

            @* Name, job title, agency, and status *@
            <div class="row justify-content-center">
                @* Name *@
                <div class="col-md-3">
                    <ValidatedInput 
                            InitialValue="@employeeName"
                            OnValidatedInput="IsValidEmployeeNameHandler"
                            OnValueInput="EmployeeNameInputHandler"
                            DisplayErrorMessage="true"
                            FieldLabel="Name"
                            InputId="salary-search-name"
                            LabelCss="col-form-label text-black" />
                </div>

                @* Job title *@
                <div class="col-md-3">
                    <ValidatedInput 
                            InitialValue="@jobTitle"
                            OnValidatedInput="IsValidEmployeeNameHandler"
                            OnValueInput="EmployeeNameInputHandler"
                            DisplayErrorMessage="true"
                            FieldLabel="Job Title"
                            InputId="salary-search-job-title"
                            LabelCss="col-form-label text-black" />
                </div>

                @* Agency *@
                <div class="col-md-3">
                    <EmployeeAgencyDropdown 
                            ExistingSelection="Enum.TryParse<EmployeeAgency>(State.Value.SearchRequest?.Agency, true, out var agency) ? agency : EmployeeAgency.AllAgencies"
                            LabelCss="col-form-label" />
                </div>

                @* Status *@
                <div class="col-md-3">
                    <EmployeeStatusDropdown 
                            ExistingSelection="Enum.TryParse<EmployeeStatus>(State.Value.SearchRequest?.Status, true, out var status) ? status : EmployeeStatus.AllStatuses"
                            LabelCss="col-form-label" />
                </div>
            </div>

            @* Year, base pay range, total pay range *@
            <div class="row justify-content-center">
                @* Year *@
                <div class="col-md-4">
                    <EmploymentYearDropdown 
                            ExistingSelection="GetExistingEmploymentYear()" 
                            LabelCss="col-form-label" />
                </div>

                @* Base pay range *@
                <div class="col-md-4">
                    <PayRangeDropdown 
                            Context="SalarySearchDropdownContext.BasePayRange" 
                            ExistingSelection="GetExistingPayRangeOption(SalarySearchDropdownContext.BasePayRange)" 
                            LabelCss="col-form-label" />
                </div>

                @* Total pay range*@
                <div class="col-md-4">
                    <PayRangeDropdown 
                            Context="SalarySearchDropdownContext.TotalPayRange" 
                            ExistingSelection="GetExistingPayRangeOption(SalarySearchDropdownContext.TotalPayRange)" 
                            LabelCss="col-form-label" />
                </div>
            </div>

            @* Sort options *@
            <div class="row justify-content-center">

                @* Sort by *@
                <div class="col-md-4">
                    <div class="d-flex flex-column">

                        @* Sort options *@
                        <label class="col-form-label" for="agency-dropdown">Sort Options</label>
                        <select @bind="sortField" id="agency-dropdown" class="form-control">
                            <option disabled>Select a field to sort by</option>
                            @foreach (var option in salarySortSelectOptions.SelectOptions)
                            {
                                <option value="@option.Key">@option.Value</option>
                            }
                        </select>

                        @* Sort order radio buttons *@
                        <div class="py-2 btn-group btn-group-sm btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="options" id="sort-by-default" autocomplete="off" checked="" @onclick="(() => SetSortByOption(SalarySortByOption.Default))">Default
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="options" id="sort-by-ascending" autocomplete="off" @onclick="(() => SetSortByOption(SalarySortByOption.Ascending))">Ascending
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="options" id="sort-by-descending" autocomplete="off" @onclick="(() => SetSortByOption(SalarySortByOption.Descending))">Descending
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Buttons and search metadata *@
<div class="row justify-content-center py-1">
    <div class="d-flex flex-column mt-3">
        @* Search button *@
        <div class="d-flex flex-row">
            <div class="mx-auto">
                @if (isValidEmployeeName && isValidJobTitle && !State.Value.IsTableRefresh)
                {
                    <button @onclick="OnSearchClicked" class="btn btn-outline-info" type="button" data-toggle="tooltip" data-placement="bottom" title="To browse all salary data, leave all fields above blank.">Search</button>
                }
                else
                {
                    <button disabled @onclick="OnSearchClicked" class="btn btn-outline-info" type="button" data-toggle="tooltip" data-placement="bottom" title="Please enter valid values in the fields above before attempting to search.">Search</button>
                }

                @if (State.Value.IsTableRefresh)
                {
                    <span class="px-1"></span>
                    <button disabled class="btn btn btn-outline-success cursor-not-allowed" type="button">Reset</button>
                    <span class="px-1"></span>
                    <button disabled class="btn btn btn-outline-danger cursor-not-allowed" type="button">Download</button>
                }
                else
                {
                    <span class="px-1"></span>
                    <button class="btn btn btn-outline-success" type="button">Reset</button>
                    <span class="px-1"></span>
                    <button class="btn btn btn-outline-danger" type="button">Download</button>
                }
            </div>
        </div>

        @* Page and result count *@
        <div class="d-flex flex-row justify-content-center mt-2">
            <span><strong>Results</strong>: @ResultCount</span>
            <span class="px-2"></span>
            <span><strong>Pages</strong>: @PageCount</span>
        </div>
    </div>
</div>

@code {

    private string? employeeName;

    private string? jobTitle;

    private bool isValidEmployeeName = true;

    private bool isValidJobTitle = true;

    private SalarySortField sortField = SalarySortField.Default;

    private SalarySortByOption sortByOption = SalarySortByOption.Default;

    private OpenReddingEnumSelectViewModel<SalarySortField> salarySortSelectOptions = new OpenReddingEnumSelectViewModel<SalarySortField>();

    private OpenReddingEnumSelectViewModel<SalarySearchRange> salarySearchRangeSelectOptions = new OpenReddingEnumSelectViewModel<SalarySearchRange>();

    [Parameter]
    public int ResultCount { get; set; }

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        salarySortSelectOptions
            .AddOption(SalarySortField.Default, "Default")
            .AddOption(SalarySortField.Name, "Name")
            .AddOption(SalarySortField.JobTitle, "Job title")
            .AddOption(SalarySortField.Year, "Year")
            .AddOption(SalarySortField.BaseSalary, "Base pay")
            .AddOption(SalarySortField.TotalWithBenefitsSalary, "Total pay with benefits");

        if (State.Value.SearchRequest is null)
        {
            return;
        }

        // Set search values from the original query
        employeeName = State.Value.SearchRequest.Name;
        jobTitle = State.Value.SearchRequest.JobTitle;
        sortByOption = Enum.TryParse<SalarySortByOption>(State.Value.SearchRequest.Status, out var sortBy) ? sortBy : sortByOption;
        sortField = Enum.TryParse<SalarySortField>(State.Value.SearchRequest.Status, out var field) ? field : sortField;
    }

    private void IsValidEmployeeNameHandler(bool isValid)
    {
        isValidEmployeeName = isValid;
    }

    private void IsValidJobTitleHandler(bool isValid)
    {
        isValidJobTitle = isValid;
    }

    private void EmployeeNameInputHandler(string? updatedEmployeeValue)
    {
        employeeName = updatedEmployeeValue;
    }

    private void JobTitleInputHandler(string? updatedJobtTileHandler)
    {
        jobTitle = updatedJobtTileHandler;
    }

    private void OnSearchClicked()
    {
        /*
        var searchRequest = new EmployeeSalarySearchRequestDto(
            employeeName,
            jobTitle,
            employeeAgency.ToString(),
            employeeStatus.ToString(),
            sortByOption.ToString(),
            int.TryParse(year, out int filteredYear) ? filteredYear : default(int?),
            sortField.ToString());

        Dispatcher.Dispatch(new LoadEmployeeSalariesAction(searchRequest, true));
         */
    }

    private void SetSortByOption(SalarySortByOption option)
    {
        sortByOption = option;
    }

    private EmploymentYear GetExistingEmploymentYear()
    {
        if (State.Value.SearchRequest is null)
        {
            return EmploymentYear.AllYears;
        }
        else if (State.Value.SearchRequest.Year.HasValue)
        {
            return Enum.TryParse<EmploymentYear>(State.Value.SearchRequest.Year.Value.ToString(), true, out var year) ? year : EmploymentYear.AllYears;
        }

        return EmploymentYear.AllYears;
    }

    private SalarySearchRange GetExistingPayRangeOption(SalarySearchDropdownContext context)
    {
        if (State.Value.SearchRequest is null)
        {
            return SalarySearchRange.AllSalaries;
        }

        return context switch
        {
            SalarySearchDropdownContext.BasePayRange => State.Value.SearchRequest.BasePayRange.HasValue ? (SalarySearchRange)State.Value.SearchRequest.BasePayRange.Value : SalarySearchRange.AllSalaries,
            SalarySearchDropdownContext.TotalPayRange => State.Value.SearchRequest.TotalPayRange.HasValue ? (SalarySearchRange)State.Value.SearchRequest.TotalPayRange.Value : SalarySearchRange.AllSalaries,
            _ => SalarySearchRange.AllSalaries
        };
    }

}
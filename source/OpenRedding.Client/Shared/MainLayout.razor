@inherits LayoutComponentBase

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager

<MatAppBarContainer>
    <MatAppBar Fixed="true">
        <MatAppBarRow>
            <MatAppBarSection>
                @if (isOpen)
                {
                    <MatIconButton Icon="format_indent_decrease" @onclick="OnMenuButtonClick"></MatIconButton>
                }
                else
                {
                    <MatIconButton Icon="menu" @onclick="OnMenuButtonClick"></MatIconButton>
                }
                <MatAppBarTitle Style="cursor: pointer;" @onclick="(() => NavigateToPage(NavigationContext.Home))"><span class="comfortaa">Open Redding</span></MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                <AuthorizeView>
                    <Authorized>
                        <MatButton Style="text-transform: initial;" Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.Salaries))" TrailingIcon="account_balance">Salaries</MatButton>
                        <MatButton Style="text-transform: initial;" Dense="true" Disabled="true" OnClick="(() => NavigateToPage(NavigationContext.Budget))" TrailingIcon="monetization_on">Budget</MatButton>
                        <MatButton Style="text-transform: initial;" Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.UserProfile))" TrailingIcon="verified_user">@UserIdentity</MatButton>
                        <MatButton Style="text-transform: initial;" Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.Logout))" TrailingIcon="play_for_work">Logout</MatButton>
                    </Authorized>
                    <NotAuthorized>
                        <MatButton Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.Register))" TrailingIcon="verified_user">Register</MatButton>
                        <MatButton Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.Login))" TrailingIcon="perm_identity">Login</MatButton>
                    </NotAuthorized>
                </AuthorizeView>
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>
    <MatAppBarContent>
        <MatDrawerContainer Style="width: 100vw; height: 100vh;">
            <MatDrawer @bind-Opened="@isOpen" Mode="@MatDrawerMode.Modal">
                <MatNavMenu Style="margin-top: 5px;">
                    <AuthorizeView>
                        <Authorized>
                            <MatNavItem OnClick="(() => NavigateToPage(NavigationContext.About))">
                                <MatIcon Icon="account_tree"></MatIcon>&nbsp; About
                            </MatNavItem>
                            <MatNavItem Href="/salaries">
                                <MatIcon Icon="account_balance"></MatIcon>&nbsp; Salaries
                            </MatNavItem>
                            <MatNavItem Href="/budget" Disabled="true">
                                <MatIcon Icon="monetization_on"></MatIcon>&nbsp; Budget
                            </MatNavItem>
                            <MatNavItem OnClick="(() => NavigateToPage(NavigationContext.Logout))">
                                <MatIcon Icon="play_for_work"></MatIcon>&nbsp; Logout
                            </MatNavItem>
                            <MatNavItem Href="/support">
                                <MatIcon Icon="code"></MatIcon>&nbsp; Support
                            </MatNavItem>
                        </Authorized>
                        <NotAuthorized>
                            <MatNavItem Href="/about">
                                <MatIcon Icon="account_tree"></MatIcon>&nbsp; About
                            </MatNavItem>
                            <MatNavItem OnClick="(() => NavigateToPage(NavigationContext.Register))">
                                <MatIcon Icon="verified_user"></MatIcon>&nbsp; Register
                            </MatNavItem>
                            <MatNavItem OnClick="(() => NavigateToPage(NavigationContext.Login))">
                                <MatIcon Icon="perm_identity"></MatIcon>&nbsp; Login
                            </MatNavItem>
                            <MatNavItem OnClick="(() => NavigateToPage(NavigationContext.GitHub))">
                                <MatIcon Icon="code"></MatIcon>&nbsp; Support
                            </MatNavItem>
                        </NotAuthorized>
                    </AuthorizeView>
                </MatNavMenu>
            </MatDrawer>
            <MatDrawerContent>
                <div class="flex-container-column">
                    @Body
                    <Footer />
                </div>
            </MatDrawerContent>
        </MatDrawerContainer>
    </MatAppBarContent>
</MatAppBarContainer>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private string? UserIdentity { get; set; }

    private bool isOpen = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask is null)
        {
            throw new UnauthorizedAccessException("Not authentication states was found");
        }

        var user = (await authenticationStateTask).User;
        var userEmail = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
        UserIdentity = userEmail is null ? user.Identity.Name : userEmail.Value;
    }

    private enum NavigationContext
    {
        Home,
        About,
        GitHub,
        Register,
        Login,
        Logout,
        UserProfile,
        Salaries,
        Budget
    }

    private void OnMenuButtonClick()
    {
        isOpen = !isOpen;
    }

    private async Task NavigateToPage(NavigationContext context)
    {
        switch (context)
        {
            case NavigationContext.About:
                NavigationManager.NavigateTo("about");
                break;
            case NavigationContext.GitHub:
                NavigationManager.NavigateTo("https://github.com/joey32793/OpenRedding");
                break;
            case NavigationContext.Register:
                NavigationManager.NavigateTo($"authentication/register?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
                break;
            case NavigationContext.Login:
                NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}/");
                break;
            case NavigationContext.Logout:
                var logoutGuid = Guid.NewGuid();
                var returnUrl = NavigationManager.BaseUri;
                await SignOutManager.SetSignOutState();
                NavigationManager.NavigateTo("authentication/logout");
                break;
            default:
                NavigationManager.NavigateTo("/");
                break;
        }
    }
}

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using OpenRedding.Client.Components
@using OpenRedding.Client.Store.Features.Salaries
@using OpenRedding.Client.Store.Features.Salaries.Actions.LoadEmployeeSalaries 
@using OpenRedding.Domain.Common.ViewModels
@using OpenRedding.Domain.Salaries.Dtos 
@using OpenRedding.Domain.Salaries.Enums


@inject IState<SalariesState> State
@inject IDispatcher Dispatcher
@* Search metadata *@
<div class="card bg-light mt-4">

    @* Card container *@
    <div class="card-body">
        @* Psuedo header *@
        <div class="text-center">
            <h4 class="card-title text-center">Search Criteria</h4>
            <h6 class="card-subtitle mb-2 text-muted">Enter values below, then hit the search button to refine your results</h6>
        </div>

        @* Refined search fields *@
        <div class="d-flex flex-column align-content-center">

            @* Name, job title, agency, and status *@
            <div class="row justify-content-center">
                @* Name *@
                <div class="col-md-3">
                    <ValidatedInput 
                            InitialValue="@employeeName"
                            OnValidatedInput="IsValidEmployeeNameHandler"
                            OnValueInput="EmployeeNameInputHandler"
                            DisplayErrorMessage="true"
                            FieldLabel="Name"
                            InputId="salary-search-name"
                            LabelCss="col-form-label text-black" />
                </div>

                @* Job title *@
                <div class="col-md-3">
                    <ValidatedInput 
                            InitialValue="@jobTitle"
                            OnValidatedInput="IsValidEmployeeNameHandler"
                            OnValueInput="EmployeeNameInputHandler"
                            DisplayErrorMessage="true"
                            FieldLabel="Job Title"
                            InputId="salary-search-job-title"
                            LabelCss="col-form-label text-black" />
                </div>

                @* Agency *@
                <div class="col-md-3">
                    <div class="d-flex flex-column">
                        <label class="col-form-label" for="agency-dropdown">Agency</label>
                        <select @bind="employeeAgency" id="agency-dropdown" class="form-control">
                            <option disabled>Select an agency</option>
                            @foreach (var agencyOption in employeeAgencySelectOptions.SelectOptions)
                            {
                                <option value="@agencyOption.Key">@agencyOption.Value</option>
                            }
                        </select>
                    </div>
                </div>

                @* Status *@
                <div class="col-md-3">
                    <div class="d-flex flex-column">
                        <label class="col-form-label" for="agency-dropdown">Status</label>
                        <select @bind="employeeStatus" id="status-dropdown" class="form-control">
                            <option disabled>Select a status</option>
                            @foreach (var statusOption in employeeStatusSelectOptions.SelectOptions)
                            {
                                <option value="@statusOption.Key">@statusOption.Value</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            @* Year, base pay range, total pay range *@
            <div class="row justify-content-center">
                @* Name *@
                <div class="col-md-4">
                    <div class="d-flex flex-column">
                        <label class="col-form-label" for="agency-dropdown">Fiscal Year</label>
                        <select id="agency-dropdown" class="form-control" @bind="year">
                            <option disabled>Select a year</option>
                            <option>All years</option>
                            @foreach (var year in fiscalYears)
                            {
                                <option value="@year.ToString()">@year</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex flex-column">
                        <label class="col-form-label" for="agency-dropdown">Base Pay Range</label>
                        <select id="agency-dropdown" class="form-control">
                            <option disabled>Select a range</option>
                            <option>All pay ranges</option>
                            @foreach (var range in salarySearchRangeSelectOptions.SelectOptions)
                            {
                                <option value="@range.Key">@range.Value</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex flex-column">
                        <label class="col-form-label" for="agency-dropdown">Total Pay Range</label>
                        <select id="agency-dropdown" class="form-control">
                            <option disabled>Select a range</option>
                            <option>All pay ranges</option>
                            @foreach (var range in salarySearchRangeSelectOptions.SelectOptions)
                            {
                                <option value="@range.Key">@range.Value</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            @* Buttons and metadata *@
            <div class="row justify-content-center">
                @* Sort by *@
                <div class="col-md-4">
                    <div class="d-flex flex-column">
                        @* Sort options *@
                        <label class="col-form-label" for="agency-dropdown">Sort Options</label>
                        <select @bind="sortField" id="agency-dropdown" class="form-control">
                            <option disabled>Select a field to sort by</option>
                            @foreach (var option in salarySortSelectOptions.SelectOptions)
                            {
                                <option value="@option.Key">@option.Value</option>
                            }
                        </select>

                        @* Sort order radio buttons *@
                        <div class="py-2 btn-group btn-group-sm btn-group-toggle" data-toggle="buttons">
                            <label class="btn btn-outline-primary active">
                                <input type="radio" name="options" id="sort-by-default" autocomplete="off" checked="" @onclick="(() => SetSortByOption(SalarySortByOption.Default))">Default
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="options" id="sort-by-ascending" autocomplete="off" @onclick="(() => SetSortByOption(SalarySortByOption.Ascending))">Ascending
                            </label>
                            <label class="btn btn-outline-primary">
                                <input type="radio" name="options" id="sort-by-descending" autocomplete="off" @onclick="(() => SetSortByOption(SalarySortByOption.Descending))">Descending
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Buttons and search metadata *@
@if (!State.Value.IsTableRefresh)
{
    <div class="row justify-content-center py-1">
        <div class="d-flex flex-column mt-3">
            @* Search button *@
            <div class="d-flex flex-row">
                <div class="mx-auto">
                    @if (isValidEmployeeName && isValidJobTitle)
                    {
                        <button @onclick="OnSearchClicked" class="btn btn-outline-info" type="button" data-toggle="tooltip" data-placement="bottom" title="To browse all salary data, leave all fields above blank.">Search</button>
                    }
                    else
                    {
                        <button style="cursor: not-allowed" disabled @onclick="OnSearchClicked" class="btn btn-outline-info" type="button" data-toggle="tooltip" data-placement="bottom" title="Please enter valid values in the fields above before attempting to search.">Search</button>
                    }
                    <span class="px-1"></span>
                    <button class="btn btn btn-outline-success" type="button">Reset</button>
                    <span class="px-1"></span>
                    <button class="btn btn btn-outline-danger" type="button">Download</button>
                </div>
            </div>

            @* Page and result count *@
            <div class="d-flex flex-row justify-content-center mt-2">
                <span><strong>Results</strong>: @ResultCount</span>
                <span class="px-2"></span>
                <span><strong>Pages</strong>: @PageCount</span>
            </div>
        </div>
    </div>
}

@code {

    private IEnumerable<int> fiscalYears = new List<int>
    {
        2011,
        2012,
        2013,
        2014,
        2015,
        2016,
        2017,
        2018
    };

    private string? employeeName;

    private string? jobTitle;

    private string? year;

    private bool isValidEmployeeName = true;

    private bool isValidJobTitle = true;

    private EmployeeAgency employeeAgency = EmployeeAgency.AllAgencies;

    private EmployeeStatus employeeStatus = EmployeeStatus.AllStatuses;

    // private SalarySearchRange searchRange = SalarySearchRange.AllSalaries;

    private SalarySortOption sortField = SalarySortOption.Default;

    private SalarySortByOption sortByOption = SalarySortByOption.Default;

    private OpenReddingEnumSelectViewModel<EmployeeAgency> employeeAgencySelectOptions = new OpenReddingEnumSelectViewModel<EmployeeAgency>();

    private OpenReddingEnumSelectViewModel<EmployeeStatus> employeeStatusSelectOptions = new OpenReddingEnumSelectViewModel<EmployeeStatus>();

    private OpenReddingEnumSelectViewModel<SalarySortOption> salarySortSelectOptions = new OpenReddingEnumSelectViewModel<SalarySortOption>();

    private OpenReddingEnumSelectViewModel<SalarySearchRange> salarySearchRangeSelectOptions = new OpenReddingEnumSelectViewModel<SalarySearchRange>();

    [Parameter]
    public int ResultCount { get; set; }

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        employeeAgencySelectOptions
            .AddOption(EmployeeAgency.AllAgencies, "All Agencies")
            .AddOption(EmployeeAgency.Redding, "Redding")
            .AddOption(EmployeeAgency.ShastaCounty, "Shasta County")
            .AddOption(EmployeeAgency.Other, "Other");

        employeeStatusSelectOptions
            .AddOption(EmployeeStatus.AllStatuses, "All Statuses")
            .AddOption(EmployeeStatus.FullTime, "Full-time")
            .AddOption(EmployeeStatus.PartTime, "Part-time")
            .AddOption(EmployeeStatus.Other, "Other");

        salarySortSelectOptions
            .AddOption(SalarySortOption.Default, "Default")
            .AddOption(SalarySortOption.Name, "Name")
            .AddOption(SalarySortOption.JobTitle, "Job title")
            .AddOption(SalarySortOption.Year, "Year")
            .AddOption(SalarySortOption.BaseSalary, "Base pay")
            .AddOption(SalarySortOption.TotalWithBenefitsSalary, "Total pay with benefits");

        salarySearchRangeSelectOptions
            .AddOption(SalarySearchRange.AllSalaries, "All salaries")
            .AddOption(SalarySearchRange._0To49, "$0 to $49,999")
            .AddOption(SalarySearchRange._100To149, "$50,000 to $99,999")
            .AddOption(SalarySearchRange._150To199, "$100,000 to $199,999")
            .AddOption(SalarySearchRange._200To249, "$200,000 to $249,999")
            .AddOption(SalarySearchRange._250To299, "$250,000 to $299,999")
            .AddOption(SalarySearchRange._300AndGreater, "$300,000 and greater");

        if (State.Value.SearchRequest is null)
        {
            return;
        }

        // Set search values from the original query
        employeeName = State.Value.SearchRequest.Name;
        jobTitle = State.Value.SearchRequest.JobTitle;
        year = State.Value.SearchRequest.Year;
        employeeAgency = Enum.TryParse<EmployeeAgency>(State.Value.SearchRequest.Agency, out var agency) ? agency : employeeAgency;
        employeeStatus = Enum.TryParse<EmployeeStatus>(State.Value.SearchRequest.Status, out var status) ? status : employeeStatus;
        sortByOption = Enum.TryParse<SalarySortByOption>(State.Value.SearchRequest.Status, out var sortBy) ? sortBy : sortByOption;
        sortField = Enum.TryParse<SalarySortOption>(State.Value.SearchRequest.Status, out var field) ? field : sortField;
    }

    private void IsValidEmployeeNameHandler(bool isValid)
    {
        isValidEmployeeName = isValid;
    }

    private void IsValidJobTitleHandler(bool isValid)
    {
        isValidJobTitle = isValid;
    }

    private void EmployeeNameInputHandler(string? updatedEmployeeValue)
    {
        employeeName = updatedEmployeeValue;
    }

    private void JobTitleInputHandler(string? updatedJobtTileHandler)
    {
        jobTitle = updatedJobtTileHandler;
    }

    private void OnSearchClicked()
    {
        var searchRequest = new EmployeeSalarySearchRequestDto(
            employeeName,
            jobTitle,
            employeeAgency.ToString(),
            employeeStatus.ToString(),
            sortByOption.ToString(),
            int.TryParse(year, out int filteredYear) ? filteredYear : default(int?),
            sortField.ToString());

        Dispatcher.Dispatch(new LoadEmployeeSalariesAction(searchRequest, true));
    }

    private void SetSortByOption(SalarySortByOption option)
    {
        sortByOption = option;
    }

}
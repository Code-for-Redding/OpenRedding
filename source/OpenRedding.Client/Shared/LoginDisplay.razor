@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <MatButton Style="text-transform: initial;" Dense="true" Disabled="true" OnClick="(() => NavigateToPage(NavigationContext.Budget))" TrailingIcon="monetization_on">Budget</MatButton>
        <MatButton Style="text-transform: initial;" Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.UserProfile))" TrailingIcon="verified_user">@context.User.Identity.Name</MatButton>
    </Authorized>
    <NotAuthorized>
        <MatButton Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.Register))" TrailingIcon="verified_user">Register</MatButton>
        <MatButton Unelevated="true" OnClick="(() => NavigateToPage(NavigationContext.Login))" TrailingIcon="perm_identity">Login</MatButton>
    </NotAuthorized>
</AuthorizeView>

@code{

    private bool isOpen = false;

    private enum NavigationContext
    {
        Home,
        About,
        GitHub,
        Register,
        Login,
        Logout,
        UserProfile,
        Salaries,
        Budget
    }

    private void OnMenuButtonClick()
    {
        isOpen = !isOpen;
    }

    private async Task NavigateToPage(NavigationContext context)
    {
        switch (context)
        {
            case NavigationContext.About:
                Navigation.NavigateTo("about");
                break;
            case NavigationContext.GitHub:
                Navigation.NavigateTo("https://github.com/joey32793/OpenRedding");
                break;
            case NavigationContext.Register:
                Navigation.NavigateTo("authentication/register");
                break;
            case NavigationContext.Login:
                Navigation.NavigateTo("authentication/login");
                break;
            case NavigationContext.Logout:
                var logoutGuid = Guid.NewGuid();
                var returnUrl = Navigation.BaseUri;
                await SignOutManager.SetSignOutState();
                Navigation.NavigateTo("authentication/logout");
                break;
            default:
                Navigation.NavigateTo("/");
                break;
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

}

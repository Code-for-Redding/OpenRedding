@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using OpenRedding.Client.Validation.Models

<EditForm Model="@validatedInput">
    <DataAnnotationsValidator />

    <div class="d-flex flex-column">
        <label class="@LabelCss" for="@InputId">@FieldLabel</label>
        <InputText 
            class="@inputCss" 
            id="@InputId" 
            @oninput="OnInputValueChange"
            @bind-Value="validatedInput.InputValue" />
        @if (DisplayErrorMessage)
        {
            <ValidationMessage For="@(() => validatedInput.InputValue)"/>
        }
    </div>
</EditForm>

@code {

    private string inputCss => editContext!.Validate() || string.IsNullOrWhiteSpace(validatedInput.InputValue) ? "form-control" : "form-control is-invalid";

    private AlphabeticalTextInput validatedInput = new AlphabeticalTextInput();

    @*private EditContext? editContext;*@

    [Parameter]
    public string? InputId { get; set; }

    [Parameter]
    public string? FieldLabel { get; set; }

    [Parameter]
    public string? LabelCss { get; set; }

    [Parameter]
    public EventCallback<bool> OnValidatedInput { get; set; }

    [Parameter]
    public EventCallback<string?> OnValueInput { get; set; }

    [Parameter]
    public bool DisplayErrorMessage { get; set; }

    [Parameter]
    public string? InitialValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => base.OnInitialized());

        if (!string.IsNullOrWhiteSpace(InitialValue))
        {
            validatedInput.InputValue = InitialValue;
        }

        editContext = new EditContext(validatedInput);
    }

    private async Task OnInputValueChange(ChangeEventArgs e)
    {
        // Grab a reference to the current input value and update the validated input
        var inputValue = e.Value.ToString();
        validatedInput.InputValue = inputValue;

        // Reference the current validation state, excluding empty strings
        var isValid = editContext!.Validate() || string.IsNullOrEmpty(inputValue);

        // Broadcase values to parent
        await OnValidatedInput.InvokeAsync(isValid);
        await OnValueInput.InvokeAsync(inputValue);
    }

}


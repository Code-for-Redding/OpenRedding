@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using System.Text.RegularExpressions

<div class="d-flex flex-column">
    <label class="@LabelCss" for="@InputId">@FieldLabel</label>
    <input class="@inputCss" id="@InputId" @oninput="OnInputValueChange" @bind-value="InputValue" />
    @if (DisplayErrorMessage && !isValid)
    {
        <span style="font-size: 11px;" class="text-danger mt-1">Please enter a valid alphabetical value</span>
    }
</div>

@code {

    private Regex alphaOnlyWithSpaceAndApostrophePatter = new Regex("^[a-zA-Z \\-']*$");

    private string inputCss = "form-control";

    private bool isValid = true;

    [Parameter]
    public string? InputId { get; set; }

    [Parameter]
    public string? FieldLabel { get; set; }

    [Parameter]
    public string? LabelCss { get; set; }

    [Parameter]
    public EventCallback<bool> OnValidatedInput { get; set; }

    [Parameter]
    public EventCallback<string?> OnValueInput { get; set; }

    [Parameter]
    public bool DisplayErrorMessage { get; set; }

    [Parameter]
    public string? InputValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(InputValue))
        {
            ValidateInput(InputValue);
        }

        await base.OnInitializedAsync();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            base.Dispose(disposing);
        }
    }

    private async Task OnInputValueChange(ChangeEventArgs e)
    {
        // Grab a reference to the current input value and update the validated input
        var inputValue = e.Value.ToString();

        // Reference the current validation state, excluding empty strings
        ValidateInput(inputValue);

        // Broadcase values to parent
        await OnValidatedInput.InvokeAsync(isValid);
        await OnValueInput.InvokeAsync(inputValue);
    }

    private void ValidateInput(string value)
    {
        if (alphaOnlyWithSpaceAndApostrophePatter.IsMatch(value))
        {
            inputCss = "form-control";
            isValid = true;
        }
        else
        {
            inputCss = "form-control is-invalid";
            isValid = false;
        }
    }

}

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using OpenRedding.Client.Services
@using OpenRedding.Domain.Common.ViewModels
@using OpenRedding.Domain.Salaries.Enums

@inject SalariesStateFacade StateFacade

<div class="d-flex flex-column">
    <label class="@LabelCss" for="agency-dropdown">Agency</label>
    <select @onchange="OnAgencySelected" id="agency-dropdown" class="form-control">
        <option disabled>Select an agency</option>
        @foreach (var agencyOption in employeeAgencySelectOptions.SelectOptions)
        {
            @if (agencyOption.Key == ExistingSelection)
            {
                <option selected value="@agencyOption.Key">@agencyOption.Value</option>
            }
            else
            {
                <option value="@agencyOption.Key">@agencyOption.Value</option>
            }
        }
    </select>
</div>

@code {

    [Parameter]
    public EmployeeAgency ExistingSelection { get; set; }

    [Parameter]
    public string? LabelCss { get; set; }

    [Parameter]
    public bool LoadFromApi { get; set; }

    private OpenReddingEnumSelectViewModel<EmployeeAgency> employeeAgencySelectOptions = new OpenReddingEnumSelectViewModel<EmployeeAgency>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        employeeAgencySelectOptions
            .AddOption(EmployeeAgency.AllAgencies, "All Agencies")
            .AddOption(EmployeeAgency.Redding, "Redding")
            .AddOption(EmployeeAgency.ShastaCounty, "Shasta County")
            .AddOption(EmployeeAgency.Other, "Other");
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            base.Dispose(disposing);
        }
    }

    private void OnAgencySelected(ChangeEventArgs e)
    {
        StateFacade.SetEmployeeAgency(Enum.Parse<EmployeeAgency>(e.Value.ToString()), LoadFromApi);
    }

}

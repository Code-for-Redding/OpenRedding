@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using OpenRedding.Client.Components.Common
@using OpenRedding.Client.Components.Dropdowns.Salaries
@using OpenRedding.Client.Models.Salaries.Dropdowns
@using OpenRedding.Client.Services
@using OpenRedding.Client.Store.State
@using OpenRedding.Domain.Salaries.Dtos
@using OpenRedding.Domain.Salaries.Enums

@inject IState<SalariesState> State
@inject SalariesStateFacade StateFacade
@inject OpenReddingApiService ApiService

@* Search metadata *@
<section id="refined-salary-search">
    <div class="card bg-light mt-4">

        @* Card container *@
        <div class="card-body">
            @* Psuedo header *@
            <div class="text-center">
                <h4 class="card-title text-center">Search Criteria</h4>
                <h6 class="card-subtitle mb-2 text-muted">Enter values below, then hit the search button to refine your results</h6>
            </div>

            @* Refined search fields *@
            <div class="d-flex flex-column align-content-center">

                @* Name, job title, agency, and status *@
                <div class="row justify-content-center">
                    @* Name *@
                    <div class="col-md-3">
                        <ValidatedInput InputValue="@employeeName"
                                        OnValidatedInput="IsValidEmployeeNameHandler"
                                        OnValueInput="EmployeeNameInputHandler"
                                        DisplayErrorMessage="true"
                                        FieldLabel="Name"
                                        InputId="salary-search-name"
                                        LabelCss="col-form-label text-black" />
                    </div>

                    @* Job title *@
                    <div class="col-md-3">
                        <ValidatedInput InputValue="@jobTitle"
                                        OnValidatedInput="IsValidEmployeeNameHandler"
                                        OnValueInput="JobTitleInputHandler"
                                        DisplayErrorMessage="true"
                                        FieldLabel="Job Title"
                                        InputId="salary-search-job-title"
                                        LabelCss="col-form-label text-black" />
                    </div>

                    @* Agency *@
                    <div class="col-md-3">
                        <OpenReddingDropdown 
                                TEnum="EmployeeAgency"
                                DropdownId="agency-dropdown"
                                Label="Agency"
                                LabelCss="col-form-label"
                                ExistingSelection="Enum.TryParse<EmployeeAgency>(State.Value.SearchRequest?.Agency, true, out var agency) ? agency : EmployeeAgency.AllAgencies"
                                DropdownOptions="agencyDropdownFactory?.GetDropdownOptions()"
                                ValueSelectedHandler="(agency) => StateFacade.SetEmployeeAgency(agency)" />
                    </div>

                    @* Status *@
                    <div class="col-md-3">
                        <OpenReddingDropdown 
                                TEnum="EmployeeStatus"
                                DropdownId="status-dropdown"
                                Label="Status"
                                LabelCss="col-form-label"
                                ExistingSelection="Enum.TryParse<EmployeeStatus>(State.Value.SearchRequest?.Status, true, out var status) ? status : EmployeeStatus.AllStatuses"
                                DropdownOptions="statusDropdownFactory?.GetDropdownOptions()"
                                ValueSelectedHandler="(status) => StateFacade.SetEmployeeStatus(status)" />
                    </div>
                </div>

                @* Year, base pay range, total pay range *@
                <div class="row justify-content-center">
                    @* Year *@
                    <div class="col-md-4">
                        <OpenReddingDropdown 
                                TEnum="FiscalYear"
                                DropdownId="fiscal-year-dropdown"
                                Label="Fiscal Year"
                                LabelCss="col-form-label"
                                ExistingSelection="GetExistingFiscalYear()"
                                DropdownOptions="fiscalYearDropdownFactory?.GetDropdownOptions()"
                                ValueSelectedHandler="(year) => StateFacade.SetFiscalYear(year)" />
                    </div>

                    @* Base pay range *@
                    <div class="col-md-4">
                        <OpenReddingDropdown 
                                TEnum="SalarySearchRange"
                                DropdownId="base-pay-range-dropdown"
                                Label="Base Pay Range"
                                LabelCss="col-form-label"
                                ExistingSelection="GetExistingPayRangeOption(SalarySearchContext.BasePayRange)"
                                DropdownOptions="salaryRangeDropdownFactory?.GetDropdownOptions()"
                                ValueSelectedHandler="(range) => StateFacade.SetSalarySearchBaseRange(range)" />
                    </div>

                    @* Total pay range*@
                    <div class="col-md-4">
                        <OpenReddingDropdown 
                                TEnum="SalarySearchRange"
                                DropdownId="total-pay-range-dropdown"
                                Label="Total Pay Range"
                                LabelCss="col-form-label"
                                ExistingSelection="GetExistingPayRangeOption(SalarySearchContext.TotalPayRange)"
                                DropdownOptions="salaryRangeDropdownFactory?.GetDropdownOptions()"
                                ValueSelectedHandler="(range) => StateFacade.SetSalarySearchTotalRange(range)" />
                    </div>
                </div>

                @* Sort options *@
                <div class="row justify-content-center">
                    <div class="d-flex flex-column">
                        <OpenReddingDropdown 
                                TEnum="SalarySortField"
                                DropdownId="salary-sort-field-dropdown"
                                Label="Sort Options"
                                LabelCss="col-form-label"
                                ExistingSelection="Enum.TryParse<SalarySortField>(State.Value.SearchRequest?.SortField, out var sortField) ? sortField : SalarySortField.Default"
                                DropdownOptions="sortFieldDropdownFactory?.GetDropdownOptions()"
                                ValueSelectedHandler="(field) => StateFacade.SetSalarySortField(field)" />

                        @* Sort by *@
                        <div class="py-2 btn-group btn-group-sm btn-group-toggle" data-toggle="buttons">
                            @* Default order *@
                            @if (existingSortOption == SalarySortByOption.Default)
                            {
                                <label class="btn btn-outline-primary active">
                                    <input type="radio" name="options" id="sort-by-default" autocomplete="off" checked @onclick="() => StateFacade.SetSalarySortBy(SalarySortByOption.Default)" /><span>Default</span>
                                </label>
                            }
                            else
                            {
                                <label class="btn btn-outline-primary">
                                    <input type="radio" name="options" id="sort-by-default" autocomplete="off" @onclick="() => StateFacade.SetSalarySortBy(SalarySortByOption.Default)" /><span>Default</span>
                                </label>
                            }

                            @* Ascending order *@
                            @if (existingSortOption == SalarySortByOption.Ascending)
                            {
                                <label class="btn btn-outline-primary active">
                                    <input type="radio" name="options" id="sort-by-ascending" autocomplete="off" checked @onclick="() => StateFacade.SetSalarySortBy(SalarySortByOption.Ascending)" /><span>Ascending</span>
                                </label>
                            }
                            else
                            {
                                <label class="btn btn-outline-primary">
                                    <input type="radio" name="options" id="sort-by-ascending" autocomplete="off" @onclick="() => StateFacade.SetSalarySortBy(SalarySortByOption.Ascending)" /><span>Ascending</span>
                                </label>
                            }

                            @* Descending order *@
                            @if (existingSortOption == SalarySortByOption.Descending)
                            {
                                <label class="btn btn-outline-primary active">
                                    <input type="radio" name="options" id="sort-by-descending" autocomplete="off" checked @onclick="() => StateFacade.SetSalarySortBy(SalarySortByOption.Descending)" /><span>Descending</span>
                                </label>
                            }
                            else
                            {
                                <label class="btn btn-outline-primary">
                                    <input type="radio" name="options" id="sort-by-descending" autocomplete="off" @onclick="() => StateFacade.SetSalarySortBy(SalarySortByOption.Descending)" /><span>Descending</span>
                                </label>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Buttons and search metadata *@
    <div class="row justify-content-center py-1">
        <div class="d-flex flex-column mt-3">
            @* Search button *@
            <div class="d-flex flex-row">
                <div class="mx-auto">
                    @if (isValidEmployeeName && isValidJobTitle && !State.Value.IsTableRefresh)
                    {
                        <button @onclick="(() => StateFacade.LoadEmployeesOnSearchClicked(string.IsNullOrWhiteSpace(employeeName) ? string.Empty : employeeName, string.IsNullOrWhiteSpace(jobTitle) ? string.Empty : jobTitle))"
                                id="refined-salary-search-button"
                                class="btn btn-outline-info"
                                type="button"
                                data-toggle="tooltip"
                                data-placement="bottom"
                                title="To browse all salary data, leave all fields above blank.">Search</button>
                    }
                    else
                    {
                        <button id="refined-salary-search-b" disabled style="cursor: not-allowed;" class="btn btn-outline-info" type="button" data-toggle="tooltip" data-placement="bottom" title="Please enter valid values in the fields above before attempting to search.">Search</button>
                    }

                    @if (State.Value.IsTableRefresh)
                    {
                        <span class="px-1"></span>
                        <button disabled style="cursor: not-allowed;" class="btn btn btn-outline-success cursor-not-allowed" type="button">Reset</button>
                        <span class="px-1"></span>
                        <button disabled style="cursor: not-allowed;" class="btn btn btn-outline-danger cursor-not-allowed" type="button">Download</button>
                    }
                    else
                    {
                        <span class="px-1"></span>
                        <button class="btn btn btn-outline-success" type="button" @onclick="OnResetClicked">Reset</button>
                        <span class="px-1"></span>
                        <button class="btn btn btn-outline-danger" type="button" @onclick="(() => StateFacade.DownloadSalaryCsv())"  data-toggle="modal" data-target="#loading-modal">Download</button>
                    }
                </div>
            </div>

            @* Page and result count *@
            <div class="d-flex flex-row justify-content-center mt-2">
                <span><strong>Results</strong>: @ResultCount</span>
                <span class="px-2"></span>
                <span><strong>Pages</strong>: @PageCount</span>
            </div>
        </div>
    </div>

    @* Download modal *@
    <!-- Modal -->
    <div class="modal fade" id="loading-modal" tabindex="-1" role="dialog" aria-labelledby="loading-modal-label" aria-hidden="true" data-backdrop="static">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content text-center">
                <div class="modal-body d-flex flex-column justify-content-center align-items-center">
                    <h4 class="py-2">Loading report...</h4>
                    <div class="spinner-border text-info" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <span class="py-2">This window will automatically close when you're report is ready for download.</span>
                </div>
            </div>
        </div>
    </div>
</section>

@code {

    private string? employeeName;

    private string? jobTitle;

    private SalarySortByOption existingSortOption;

    private bool isValidEmployeeName;

    private bool isValidJobTitle;

    private EmployeeStatusDropdownFactory? statusDropdownFactory;

    private EmployeeAgencyDropdownFactory? agencyDropdownFactory;

    private FiscalYearDropdownFactory? fiscalYearDropdownFactory;

    private SalaryRangeDropdownFactory? salaryRangeDropdownFactory;

    private SortFieldDropdownFactory? sortFieldDropdownFactory;

    [Parameter]
    public int ResultCount { get; set; }

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Assign the values for the dropdown markup
        statusDropdownFactory = new EmployeeStatusDropdownFactory();
        agencyDropdownFactory = new EmployeeAgencyDropdownFactory();
        fiscalYearDropdownFactory = new FiscalYearDropdownFactory();
        salaryRangeDropdownFactory = new SalaryRangeDropdownFactory();
        sortFieldDropdownFactory = new SortFieldDropdownFactory();

        if (State.Value.SearchRequest is null)
        {
            return;
        }

        // Set search values from the original query
        employeeName = State.Value.SearchRequest.Name;
        jobTitle = State.Value.SearchRequest.JobTitle;
        existingSortOption = Enum.TryParse<SalarySortByOption>(State.Value.SearchRequest.SortBy, out var sortBy) ? sortBy : SalarySortByOption.Default;
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            base.Dispose(disposing);
        }
    }

    private FiscalYear GetExistingFiscalYear()
    {
        if (State.Value.SearchRequest is null)
        {
            return FiscalYear.AllYears;
        }
        else if (State.Value.SearchRequest.Year.HasValue)
        {
            return Enum.TryParse<FiscalYear>(State.Value.SearchRequest.Year.Value.ToString(), true, out var year) ? year : FiscalYear.AllYears;
        }

        return FiscalYear.AllYears;
    }

    private SalarySearchRange GetExistingPayRangeOption(SalarySearchContext context)
    {
        if (State.Value.SearchRequest is null)
        {
            return SalarySearchRange.AllSalaries;
        }

        return context switch
        {
            SalarySearchContext.BasePayRange => State.Value.SearchRequest.BasePayRange.HasValue ? (SalarySearchRange)State.Value.SearchRequest.BasePayRange.Value : SalarySearchRange.AllSalaries,
            SalarySearchContext.TotalPayRange => State.Value.SearchRequest.TotalPayRange.HasValue ? (SalarySearchRange)State.Value.SearchRequest.TotalPayRange.Value : SalarySearchRange.AllSalaries,
            _ => SalarySearchRange.AllSalaries
        };
    }

    /***** Event Handlers *****/
    private void IsValidEmployeeNameHandler(bool isValid)
    {
        isValidEmployeeName = isValid;
        StateHasChanged();
    }

    private void IsValidJobTitleHandler(bool isValid)
    {
        isValidJobTitle = isValid;
        StateHasChanged();
    }

    private void EmployeeNameInputHandler(string? updatedEmployeeValue)
    {
        employeeName = updatedEmployeeValue;
        StateHasChanged();
    }

    private void JobTitleInputHandler(string? updatedJobtTileHandler)
    {
        jobTitle = updatedJobtTileHandler;
        StateHasChanged();
    }

    private void OnResetClicked()
    {
        employeeName = string.Empty;
        jobTitle = string.Empty;

        StateFacade.SetCurrentSearchRequest(new EmployeeSalarySearchRequestDto(), true);
    }

}

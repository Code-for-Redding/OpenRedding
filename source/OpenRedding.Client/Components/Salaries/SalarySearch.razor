@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using OpenRedding.Client.Components.Common
@using OpenRedding.Client.Models.Salaries.Dropdowns
@using OpenRedding.Client.Services
@using OpenRedding.Client.Store.State
@using OpenRedding.Domain.Salaries.Dtos
@using OpenRedding.Domain.Salaries.Enums

@inject SalariesStateFacade StateFacade
@inject NavigationManager Navigation
@inject IState<SalariesState> State
@inject IJSRuntime JSRuntime

@* Salary search *@
<div class="form-group row px-2">

    @* Name *@
    <div class="col-md-3">
        <ValidatedInput InputValue="@employeeName"
                        OnValidatedInput="IsValidEmployeeNameHandler"
                        OnValueInput="EmployeeNameInputHandler"
                        DisplayErrorMessage="false"
                        FieldLabel="Name"
                        InputId="salary-search-name"
                        LabelCss="col-form-label text-white" />
    </div>

    @* Job title *@
    <div class="col-md-3">
        <ValidatedInput InputValue="@jobTitle"
                        OnValidatedInput="IsValidJobTitleHandler"
                        OnValueInput="JobTitleInputHandler"
                        DisplayErrorMessage="false"
                        FieldLabel="Job Title"
                        InputId="salary-search-job-title"
                        LabelCss="col-form-label text-white" />
    </div>

    @* Agency *@
    <div class="col-md-3">
        @*
        *@
        <OpenReddingDropdown 
                TEnum="EmployeeAgency"
                DropdownId="agency-dropdown"
                Label="Agency"
                LabelCss="col-form-label text-white-90"
                ExistingSelection="Enum.TryParse<EmployeeAgency>(State.Value.SearchRequest?.Agency, true, out var agency) ? agency : EmployeeAgency.AllAgencies"
                DropdownOptions="agencyDropdownFactory?.GetDropdownOptions()"
                ValueSelectedHandler="(agency) => StateFacade.SetEmployeeAgency(agency)" />
    </div>

    @* Status *@
    <div class="col-md-3">
        <OpenReddingDropdown TEnum="EmployeeStatus"
                             DropdownId="status-dropdown"
                             Label="Status"
                             LabelCss="col-form-label text-white-90"
                             ExistingSelection="Enum.TryParse<EmployeeStatus>(State.Value.SearchRequest?.Status, true, out var status) ? status : EmployeeStatus.AllStatuses"
                             DropdownOptions="statusDropdownFactory?.GetDropdownOptions()"
                             ValueSelectedHandler="(status) => StateFacade.SetEmployeeStatus(status)" />
    </div>

    @* Search button *@
    @if (isValidEmployeeName && isValidJobTitle)
    {
        <div class="pt-4 d-flex flex-row mx-auto">
            <button id="salary-search-button" @onclick="OnSearchClicked" class="btn btn-lg btn-info" type="button" data-toggle="tooltip" data-placement="bottom" title="To browse all salary data, leave all fields above blank.">Search</button>
        </div>
    }
    else
    {
        <div class="pt-4 d-flex flex-row mx-auto">
            <button id="salary-search-button" style="cursor: not-allowed;" disabled @onclick="OnSearchClicked" class="btn btn-lg btn-info" type="button" data-toggle="tooltip" data-placement="bottom" title="Please enter valid values in the fields above before attempting to search.">Search</button>
        </div>
    }
</div>

@code {

    private string? employeeName;

    private string? jobTitle;

    private bool isValidEmployeeName = true;

    private bool isValidJobTitle = true;

    private EmployeeStatusDropdownFactory? statusDropdownFactory;

    private EmployeeAgencyDropdownFactory? agencyDropdownFactory;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Assign the values for the dropdown markup
        statusDropdownFactory = new EmployeeStatusDropdownFactory();
        agencyDropdownFactory = new EmployeeAgencyDropdownFactory();

        if (State.Value.SearchRequest is null)
        {
            return;
        }

        // Set search values from the original query
        employeeName = State.Value.SearchRequest.Name;
        jobTitle = State.Value.SearchRequest.JobTitle;
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            base.Dispose(disposing);
        }
    }

    /***** Event Handlers *****/
    private void OnSearchClicked()
    {
        var searchRequest = new EmployeeSalarySearchRequestDto(
            name: employeeName,
            jobTitle: jobTitle,
            agency: State.Value.SearchRequest?.Agency,
            status: State.Value.SearchRequest?.Status);

        // Set the current search request on the state and load employees from the request
        StateFacade.SetCurrentSearchRequest(searchRequest, loadFromApi: false);
        StateFacade.LoadEmployeesFromSearchRequest();
    }

    private void IsValidEmployeeNameHandler(bool isValid)
    {
        isValidEmployeeName = isValid;
    }

    private void IsValidJobTitleHandler(bool isValid)
    {
        isValidJobTitle = isValid;
    }

    private void EmployeeNameInputHandler(string? updatedEmployeeValue)
    {
        employeeName = updatedEmployeeValue;
    }

    private void JobTitleInputHandler(string? updatedJobtTileHandler)
    {
        jobTitle = updatedJobtTileHandler;
    }

}
